#version=RHEL8
ignoredisk --only-use=sda
# System bootloader configuration
bootloader --location=mbr --boot-drive=sda
# Partition type
autopart --type=lvm
# Partition clearing information
clearpart --all
zerombr
# Reboot after installation
reboot --eject
# Use text mode install
text
# Groups
group --name=adm
group --name=systemd-journal
# Keyboard layouts
keyboard --vckeymap=es-winkeys --xlayouts='es (winkeys)','us'
# System language
lang en_US.UTF-8 --addsupport=es_ES.UTF-8

# Network information
network  --bootproto=dhcp --device=enp0s3 --ipv6=auto --activate
network  --bootproto=dhcp --hostname=centos
# Not use network installation because strange errors appear and it also takes a long time
# url --url=http://mirror.centos.org/centos/8-stream/BaseOS/x86_64/os
# repo --name=AppStream --baseurl=http://mirror.centos.org/centos/8-stream/AppStream/x86_64/os

# Root password
rootpw --lock
# System authorization information
authselect --enableshadow --passalgo=sha512
# Run the Setup Agent on first boot
firstboot --enable
# Do not configure the X Window System
skipx
# System services
services --enabled=chronyd
# Disable selinux
selinux --disabled
# System timezone
timezone Europe/Madrid --isUtc
# Users
# Howto generate crypted passwords: python -c 'import crypt,base64,os; print(crypt.crypt("password", "$6$" + base64.b64encode(os.urandom(6))))'
# Example create user
# user --groups=wheel,adm,systemd-journal --name=myuser --password=cryptedpassword --iscrypted --gecos="myuser"
user --groups=wheel,adm --name=packer --password=packer

# X Window System configuration information (only for graphical installation)
# xconfig  --startxonboot
# License agreement (only for graphical installation)
# eula --agreed


# If we need to generate one image without docs
# %packages --excludedocs
%packages
@^core
chrony
gettext
# unnecessary packages
-biosdevname
-dnf-plugin-spacewalk
-dracut-config-rescue
-firewalld
-firewalld-filesystem
-geolite2-city
-geolite2-country
-lib*-firmware
-iwl*-firmware
-kexec-tools
-iprutils
-microcode_ctl
-plymouth
-plymouth-core
-plymouth-scripts
-python3-dnf-plugin-spacewalk
-python3-firewall
-selinux-policy
-selinux-policy-targeted
-rpm-plugin-selinux
%end


%addon com_redhat_kdump --disable --reserve-mb='auto'
%end


%anaconda
pwpolicy root --minlen=6 --minquality=1 --notstrict --nochanges --notempty
pwpolicy user --minlen=6 --minquality=1 --notstrict --nochanges --emptyok
pwpolicy luks --minlen=6 --minquality=1 --notstrict --nochanges --notempty
%end


%post --log=/root/ks-post.log

echo "INFO: Install DNS utils deltarpm and curl"
dnf -y install --setopt=tsflags=nodocs net-tools bind-utils drpm curl
echo "INFO: Clean dnf caches"
dnf clean all
rm -rf /var/cache/dnf

echo "INFO: Update all packages"
dnf -y update --setopt=tsflags=nodocs
echo "INFO: Clean dnf caches"
dnf clean all
rm -rf /var/cache/dnf

echo "INFO: Enable and restart chronyd"
systemctl enable chronyd.service
systemctl restart chronyd.service

echo "INFO: Set selinux to disabled"
sed -i 's/^SELINUX=.*$/SELINUX=disabled/g' /etc/selinux/config
setenforce 0

echo "INFO: Disable firewalld"
rpm --quiet -q firewalld && systemctl stop firewalld
rpm --quiet -q firewalld && systemctl disable firewalld
systemctl mask firewalld

echo "INFO: Install EPEL repository"
dnf -y install --setopt=tsflags=nodocs epel-release
dnf -y update --setopt=tsflags=nodocs epel-release
echo "INFO: Clean dnf caches"
dnf clean all
rm -rf /var/cache/dnf

echo "INFO: Install dnf plugins"
dnf -y install --setopt=tsflags=nodocs dnf-plugin-ovl
echo "INFO: Clean dnf caches"
dnf clean all
rm -rf /var/cache/dnf

echo "INFO: Make amount of installed kernels to two"
sed -r -i -e 's/^(\s*installonly_limit=).*/\12/g' /etc/dnf/dnf.conf

echo "INFO: Install OpenStack cloud packages"
dnf -y install --setopt=tsflags=nodocs cloud-init cloud-utils-growpart acpid
echo "INFO: Clean dnf caches"
dnf clean all
rm -rf /var/cache/dnf

echo "INFO: Install utility packages"
dnf -y install --setopt=tsflags=nodocs virt-what jq time strace tcpdump traceroute nmap nmap-ncat htop glances util-linux

echo "INFO: Disable cloud-init"
touch /etc/cloud/cloud-init.disabled

echo "INFO: Remove cloud-init default domainname localdomain"
sed -i -e 's/localdomain//g' /usr/lib/python3.6/site-packages/cloudinit/sources/__init__.py
rm -f /usr/lib/python3.6/site-packages/cloudinit/sources/__init__.py[co]

echo "INFO: Configure cloud-init. Add in cloud_init_modules section the module resolv-conf"
sed -i 's/^ - ssh/ - ssh\n - resolv-conf/' /etc/cloud/cloud.cfg

echo "INFO: Enable and start acpid daemon"
systemctl enable acpid
systemctl start acpid

echo "INFO: Create interface eth0"
echo 'DEVICE=eth0
BOOTPROTO=dhcp
BOOTPROTOv6=dhcp
ONBOOT=yes
TYPE=Ethernet
USERCTL=yes
PEERDNS=yes
IPV6INIT=yes
PERSISTENT_DHCLIENT=1' > /etc/sysconfig/network-scripts/ifcfg-eth0

echo "INFO: Create interface eth1"
echo 'DEVICE=eth1
BOOTPROTO=dhcp
BOOTPROTOv6=dhcp
ONBOOT=yes
TYPE=Ethernet
USERCTL=yes
PEERDNS=yes
IPV6INIT=yes
PERSISTENT_DHCLIENT=1' > /etc/sysconfig/network-scripts/ifcfg-eth1

echo "INFO: Create interface eth2"
echo 'DEVICE=eth2
BOOTPROTO=dhcp
BOOTPROTOv6=dhcp
ONBOOT=yes
TYPE=Ethernet
USERCTL=yes
PEERDNS=yes
IPV6INIT=yes
PERSISTENT_DHCLIENT=1' > /etc/sysconfig/network-scripts/ifcfg-eth2

echo "INFO: Create interface eth3"
echo 'DEVICE=eth3
BOOTPROTO=dhcp
BOOTPROTOv6=dhcp
ONBOOT=yes
TYPE=Ethernet
USERCTL=yes
PEERDNS=yes
IPV6INIT=yes
PERSISTENT_DHCLIENT=1' > /etc/sysconfig/network-scripts/ifcfg-eth3

echo "INFO: Create interface eth4"
echo 'DEVICE=eth4
BOOTPROTO=dhcp
BOOTPROTOv6=dhcp
ONBOOT=yes
TYPE=Ethernet
USERCTL=yes
PEERDNS=yes
IPV6INIT=yes
PERSISTENT_DHCLIENT=1' > /etc/sysconfig/network-scripts/ifcfg-eth4

echo "INFO: Create interface eth5"
echo 'DEVICE=eth5
BOOTPROTO=dhcp
BOOTPROTOv6=dhcp
ONBOOT=yes
TYPE=Ethernet
USERCTL=yes
PEERDNS=yes
IPV6INIT=yes
PERSISTENT_DHCLIENT=1' > /etc/sysconfig/network-scripts/ifcfg-eth5

echo "INFO: Remove other existing net interfaces"
rm -f /etc/sysconfig/network-scripts/{ifcfg-enp0s3,ifcfg-enp0s8,ifcfg-enp0s9}

echo "INFO: Configure correctly the network"
echo 'NETWORKING=yes
NOZEROCONF=yes' > /etc/sysconfig/network

echo "INFO: Reload and restart NetworkManager"
systemctl reload NetworkManager
systemctl restart NetworkManager

echo "INFO: Configure correctly grub2"
echo 'GRUB_TIMEOUT=1
GRUB_DISTRIBUTOR="$(sed '\''s, release .*$,,g'\'' /etc/system-release)"
GRUB_DEFAULT=saved
GRUB_DISABLE_SUBMENU=true
GRUB_TERMINAL_OUTPUT="console serial"
GRUB_SERIAL_COMMAND="serial --speed=115200 --unit=0 --word=8 --parity=no --stop=1"
GRUB_CMDLINE_LINUX="crashkernel=auto console=tty0 console=ttyS0,115200n8 vconsole.keymap=es net.ifnames=0 biosdevname=0 nofb nomodeset vga=791"
GRUB_DISABLE_RECOVERY=true
GRUB_ENABLE_BLSCFG=true
' > /etc/default/grub

echo "INFO: Save grub2 changes"
grub2-mkconfig -o /boot/grub2/grub.cfg

%end

